
#include <time.h>

clock_t start, end;
#define TIC start = clock()
#define TOC end = clock();printf("%f seconds.\n", (double)(end-start)/CLOCKS_PER_SEC)

void disp(stream &s, int l = 0, bool pages = false){
	if(l>s.getLen() || l == 0){
		l = s.getLen();
	}
	int i, j, k;
	k = 0;
	for(i = 0;i<l;i+=16){
		printf("%08X: ", k*16);
		for(j = 0;j<16;j++){
			if(i+j<l){
				printf("%02X ", s[i+j]);
			}
		}
		printf("\n");
		k++;
		if(k%20 == 0 && pages)
			system("pause");
	}
}

void disp(int l){
	printf("%d", l);
}

void disp(int* l, int len){
	for(int i =0 ;i<len;i++){
		printf("%d ", l[i]);
	}
}

void disp(matrix _mat){
	int i,j;
	for(i=0;i<_mat.getRowCount();i++){
		for(j=0;j<_mat.getColumnCount();j++){
			printf("%08X ", (unsigned long)(b32)_mat[i][j]);
		}
		printf("\n");
	}
}

void disp0(matrix _mat){
	int i,j;
	for(i=0;i<_mat.getRowCount();i++){
		for(j=0;j<_mat.getColumnCount();j++){
			if(_mat[i][j] != 0){
				printf("X");
			}else{
				printf("-");
			}
		}
		printf("\n");
	}
}

void disp1(matrix _mat){
	int i,j;
	for(i=0;i<_mat.getRowCount();i++){
		for(j=0;j<_mat.getColumnCount();j++){
			if(_mat[i][j].get_A() != 0){
				printf("%X", (unsigned long)(b32)_mat[i][j].get_A()>>4);
			}else{
				printf("-");
			}
		}
		printf("\n");
	}
}

str num2str(unsigned int n){
	if(n == 0){
		return "0";
	}
	str s = "";
	while(n){
		char d = '0' + n % 10;
		s = d + s;
		n /= 10;
	}
	return s;
}


void charMat(char p, matrix &mat){
	if(p>='a'&& p <= 'z'){
		p = p-'a'+'A';
	}
	int b[41][25]={
		{0,1,1,1,0,
		 1,0,0,1,1,
		 1,0,1,0,1,
		 1,1,0,0,1,
		 0,1,1,1,0},
		{0,0,1,0,0,
		 0,1,1,0,0,
		 0,0,1,0,0,
		 0,0,1,0,0,
		 0,1,1,1,0},
		{0,1,1,1,0,
		 1,0,0,0,1,
		 0,0,1,1,0,
		 0,1,0,0,0,
		 1,1,1,1,1},
		{0,1,1,1,0,
		 1,0,0,0,1,
		 0,0,1,1,0,
		 1,0,0,0,1,
		 0,1,1,1,0},
		{0,0,1,1,0,
		 0,1,0,1,0,
		 1,0,0,1,0,
		 1,1,1,1,1,
		 0,0,0,1,0},
		{1,1,1,1,1,
		 1,0,0,0,0,
		 1,1,1,1,0,
		 0,0,0,0,1,
		 1,1,1,1,0},
		{0,1,1,1,1,
		 1,0,0,0,0,
		 1,1,1,1,0,
		 1,0,0,0,1,
		 0,1,1,1,0},
		{1,1,1,1,1,
		 0,0,0,0,1,
		 0,0,0,1,0,
		 0,0,1,0,0,
		 0,1,0,0,0},
		{0,1,1,1,0,
		 1,0,0,0,1,
		 0,1,1,1,0,
		 1,0,0,0,1,
		 0,1,1,1,0},
		{0,1,1,1,0,
		 1,0,0,0,1,
		 0,1,1,1,1,
		 0,0,0,0,1,
		 0,0,1,1,0},
		{0,1,1,1,0,
		 1,0,0,0,1,
		 1,1,1,1,1,
		 1,0,0,0,1,
		 1,0,0,0,1},
		{1,1,1,1,0,
		 1,0,0,0,1,
		 1,1,1,1,0,
		 1,0,0,0,1,
		 1,1,1,1,0},
		{0,1,1,1,1,
		 1,0,0,0,0,
		 1,0,0,0,0,
		 1,0,0,0,0,
		 0,1,1,1,1},
		{1,1,1,1,0,
		 1,0,0,0,1,
		 1,0,0,0,1,
		 1,0,0,0,1,
		 1,1,1,1,0},
		{1,1,1,1,1,
		 1,0,0,0,0,
		 1,1,1,1,0,
		 1,0,0,0,0,
		 1,1,1,1,1},
		{1,1,1,1,1,
		 1,0,0,0,0,
		 1,1,1,1,0,
		 1,0,0,0,0,
		 1,0,0,0,0},
		{0,1,1,1,1,
		 1,0,0,0,0,
		 1,0,1,1,1,
		 1,0,0,0,1,
		 0,1,1,1,1},
		{1,0,0,0,1,
		 1,0,0,0,1,
		 1,1,1,1,1,
		 1,0,0,0,1,
		 1,0,0,0,1},
		{0,1,1,1,0,
		 0,0,1,0,0,
		 0,0,1,0,0,
		 0,0,1,0,0,
		 0,1,1,1,0},
		{0,0,0,0,1,
		 0,0,0,0,1,
		 0,0,0,0,1,
		 1,0,0,0,1,
		 0,1,1,1,0},
		{1,0,0,0,1,
		 1,0,0,1,0,
		 1,1,1,0,0,
		 1,0,0,1,0,
		 1,0,0,0,1},
		{1,0,0,0,0,
		 1,0,0,0,0,
		 1,0,0,0,0,
		 1,0,0,0,0,
		 1,1,1,1,1},
		{1,0,0,0,1,
		 1,1,0,1,1,
		 1,0,1,0,1,
		 1,0,0,0,1,
		 1,0,0,0,1},
		{1,0,0,0,1,
		 1,1,0,0,1,
		 1,0,1,0,1,
		 1,0,0,1,1,
		 1,0,0,0,1},
		{0,1,1,1,0,
		 1,0,0,0,1,
		 1,0,0,0,1,
		 1,0,0,0,1,
		 0,1,1,1,0},
		{1,1,1,1,0,
		 1,0,0,0,1,
		 1,1,1,1,0,
		 1,0,0,0,0,
		 1,0,0,0,0},
		{0,1,1,1,0,
		 1,0,0,0,1,
		 1,0,1,0,1,
		 1,0,0,1,0,
		 0,1,1,0,1},
		{1,1,1,1,0,
		 1,0,0,0,1,
		 1,1,1,1,0,
		 1,0,0,0,1,
		 1,0,0,0,1},
		{0,1,1,1,1,
		 1,0,0,0,0,
		 0,1,1,1,0,
		 0,0,0,0,1,
		 1,1,1,1,0},
		{1,1,1,1,1,
		 0,0,1,0,0,
		 0,0,1,0,0,
		 0,0,1,0,0,
		 0,0,1,0,0},
		{1,0,0,0,1,
		 1,0,0,0,1,
		 1,0,0,0,1,
		 1,0,0,0,1,
		 0,1,1,1,0},
		{1,0,0,0,1,
		 1,0,0,0,1,
		 1,0,0,0,1,
		 0,1,0,1,0,
		 0,0,1,0,0},
		{1,0,0,0,1,
		 1,0,0,0,1,
		 1,0,1,0,1,
		 1,0,1,0,1,
		 0,1,0,1,0},
		{1,0,0,0,1,
		 0,1,0,1,0,
		 0,0,1,0,0,
		 0,1,0,1,0,
		 1,0,0,0,1},
		{1,0,0,0,1,
		 0,1,0,1,0,
		 0,0,1,0,0,
		 0,0,1,0,0,
		 0,0,1,0,0},
		{1,1,1,1,1,
		 0,0,0,1,0,
		 0,0,1,0,0,
		 0,1,0,0,0,
		 1,1,1,1,1},
		{0,0,0,0,0,
		 0,0,0,0,0,
		 0,0,0,0,0,
		 0,0,1,0,0,
		 0,0,0,0,0},
		{0,0,0,0,0,
		 0,0,0,0,0,
		 0,0,0,0,0,
		 0,0,0,0,0,
		 0,1,1,1,0},
		{0,0,1,0,0,
		 0,1,0,0,0,
		 0,1,0,0,0,
		 0,1,0,0,0,
		 0,0,1,0,0},
		{0,0,1,0,0,
		 0,0,0,1,0,
		 0,0,0,1,0,
		 0,0,0,1,0,
		 0,0,1,0,0},
		{0,0,0,0,0,
		 0,0,0,0,0,
		 0,0,0,0,0,
		 0,0,0,0,0,
		 0,0,0,0,0}
	};
	int situ = 0;
	if(p >= 'A' && p <= 'Z'){
		situ = p - 'A' + 10;
	}else if(p >= '0' && p<= '9'){
		situ = p - '0';
	}else if(p == '.'){
		situ = 36;
	}else if(p == '_'){
		situ = 37;
	}else if(p == '('){
		situ = 38;
	}else if(p == ')'){
		situ = 39;
	}else{
		situ = 40;
	}
	mat.allocate(5,5);
	int i;
	for(i=0;i<25;i++){
		mat.push(b[situ][i]?color(0xff,0,0,0):color(0,0,0,0));
	}
}
void strMat(const str &s, matrix &mat){
	char p;
	matrix subMat;
	mat.allocate(5,6*s.size()+6);
	mat.fill(0);
	for(int i = 0;i<s.size();i++){
		p = s[s.size()-i-1];
		charMat(p, subMat);
		mat.putFore(subMat);
		mat.elemMoveHonz(6);
		subMat.release();
	}
}